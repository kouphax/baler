Baler is a Web Resource Bundler for .NET.  Baler can be used to concatenate CSS or JavaScript files with hooks that allow for manipulation of the bales.  These hooks can be used to provide minification of the content or allow for language dialects to be used such as CoffeeScript or LESS.  Baler can be used within WebForms and ASP.NET MVC (as well as any other web framework view engine that supports execution of server side code).  It uses a semi-fluent API to ensure code is clean and readable.

h2. Install

The simplest way to install Baler is using NuGet Package Manager

{% highlight console %}

Install-Package CodeSlice.Web.Baler

{% endhighlight %}

Alternatively clone the GitHub repository 

{% highlight console %}

git clone https://github.com/kouphax/baler.git

{% endhighlight %}

h2. Usage

h3. Starter for 10

You will use the @Build@ method to construct your bales.  Just add a reference to the Baler namespace which ever way you want,

{% highlight html %}
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="CodeSlice.Web.Test.Default" %>
<%@ Import Namespace="CodeSlice.Web.Baler" %>

<!DOCTYPE HTML />
<html>
  <head>
  </head>
  <body>
  </body>
</html>
{% endhighlight %}

Next we need to tell Baler to construct a bale from a number of scripts

{% highlight html %}
  <head>
    <%=
      Baler.Build(
        "~/scripts/script1.js",
        "~/scripts/script2.js",
        "~/scripts/script3.js",
      )
    %>
  </head>
{% endhighlight %}

Finally we need to specify how we should render this bundle.  We've included a number of javascript files so let's render it as JavaScript.

{% highlight html %}
    <%=
      Baler.Build(
        "~/scripts/script1.js",
        "~/scripts/script2.js",
        "~/scripts/script3.js",
      ).AsJs()
    %>
{% endhighlight %}

The our final markup should look like this,

{% highlight html %}
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="CodeSlice.Web.Test.Default" %>
<%@ Import Namespace="CodeSlice.Web.Baler" %>

<!DOCTYPE HTML />
<html>
  <head>
    <%=
      Baler.Build(
        "~/scripts/script1.js",
        "~/scripts/script2.js",
        "~/scripts/script3.js",
      ).AsJs()
    %>
  </head>
  <body>
  </body>
</html>
{% endhighlight %}

h3. Baler

@Baler@ is the main classed used in the Baler solution.  It is responsible for two things,

# Providing a mechanism for building/defining bales, and,
# Providing a simple caching mechanism to reduce unnecessary rebuilding of bales.

h3. AsJs()

@AsJS()@ 

h3. AsCss()

Coming Soon

h3. Before and After

Coming Soon

h2. Caching

Coming Soon

h2. Extensions

Baler supports 2 main hooks for manipulating the content of a bundle,

* @Before@ provides the ability to manipulate each item in the bale in turn.  It receives the path to the original item and the content of the item and expects to return the transformed content.
* @After@ provides the ability to manipulate the entire bale before it is written to the output file.  It receives just the content and expects to return the transformed contents.

EXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLE

h3. Order

Both of these methods can accept an optional @order@ parameter that can be used to control the order of execution.  For example the MS Ajax Minifier Extension need to run after all other possible transforms so it is given an order of 999 to prevent it executing early.

EXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLE

h3. Minification

Coming Soon

h3. LESS

Coming Soon

h3. CoffeeScript

Coming Soon

h3. Writing Custom Extensions

Coming Soon

h2. Annotated Source Code

The annotated source code for Baler is available in 2 parts,

# "Baler Core":http://kouphax.github.com/baler/CodeSlice.Web.Baler/CodeSlice.Web.Baler/Baler.html
# "Baler Extensions":http://kouphax.github.com/baler/CodeSlice.Web.Baler/CodeSlice.Web.Baler.Extensions.AjaxMinifier/MinificationExtensions.html